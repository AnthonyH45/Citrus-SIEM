{"version":3,"sources":["components/Machine/Machines.tsx","components/MGrid/MGrid.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","root","minWidth","backgroundColor","bullet","display","margin","transform","color","title","fontSize","pos","marginBottom","nested","paddingLeft","Machine","key","m","classes","bull","className","Card","CardContent","Typography","gutterBottom","Uptime","variant","component","Hostname","IP","OS","theme","flexGrow","paper","height","width","control","padding","spacing","MGrid","inv","Grid","container","item","xs","justify","Object","entries","map","e","k","v","socket","WebSocket","App","React","useState","Services","ms","setMachines","addEventListener","console","log","data","JSON","parse","OP","send","stringify","type","Data","prev","Ident","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAKMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,gBAAiB,aAEnBC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,WACXC,MAAO,SAETC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,IAEhBC,OAAQ,CACNC,YAAa,MAiBF,SAASC,EAAT,GAAmC,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,EAC9BC,EAAUnB,IACVoB,EAAO,sBAAMC,UAAWF,EAAQd,OAAzB,oBAEb,OACE,cAACiB,EAAA,EAAD,CAAMD,UAAWF,EAAQjB,KAAzB,SACE,eAACqB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYH,UAAWF,EAAQT,MAAOD,MAAM,gBAAgBgB,cAAY,EAAxE,SACGP,EAAEQ,SAEL,eAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKC,UAAU,KAAnC,UACGR,EADH,IACUF,EAAEW,YAEZ,eAACL,EAAA,EAAD,CAAYH,UAAWF,EAAQP,IAAKH,MAAM,gBAA1C,UACGS,EAAEY,GADL,OACaZ,EAAEa,UATiBd,GCxCxC,IAAMjB,EAAYC,aAAW,SAAC+B,GAAD,MAAY,CACvC9B,KAAM,CACJ+B,SAAU,GAEZC,MAAO,CACLC,OAAQ,IACRC,MAAO,KAETC,QAAS,CACPC,QAASN,EAAMO,QAAQ,QASZ,SAASC,EAAT,GAAmC,IAAnBC,EAAkB,EAAlBA,IAAKxB,EAAa,EAAbA,IAC1BE,EAAUnB,IAEhB,OACI,cAAC0C,EAAA,EAAD,CAAMC,WAAS,EAACtB,UAAWF,EAAQjB,KAAMqC,QAAS,EAAlD,SACI,cAACG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACI,cAACH,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAQ,SAASP,QAAS,EAA1C,SACKQ,OAAOC,QAAQP,GAAKQ,KAAI,SAAAC,GAAM,IAAD,cACbA,EADa,GACrBC,EADqB,KAClBC,EADkB,KAE5B,OACE,cAACV,EAAA,EAAD,CAAcE,MAAI,EAAlB,SACE,cAAC5B,EAAD,CAAiBE,EAAGkC,GAAND,IADLA,WAN+BlC,G,UCrB5DoC,EAAS,IAAIC,UAAU,0BAUd,SAASC,IAAM,MACFC,IAAMC,SAAS,CAAC,CACxC/B,OAAQ,SACRG,SAAU,WACVC,GAAI,KACJC,GAAI,KACJ2B,SAAU,CAAC,gBANe,mBACrBC,EADqB,KACjBC,EADiB,KAsC5B,OA7BAP,EAAOQ,iBAAiB,QAAQ,SAACX,GAC7BY,QAAQC,IAAI,oBAGhBV,EAAOQ,iBAAiB,WAAW,SAACX,GAClCY,QAAQC,IAAR,oBAAyBb,EAAEc,OAE3B,IAAMA,EAAOC,KAAKC,MAAMhB,EAAEc,MAC1B,OAAQA,EAAKG,IAEX,IAAK,OACHd,EAAOe,KAAKH,KAAKI,UAAU,CACzBC,KAAM,UAER,MAEF,IAAK,gBACHV,GAAY,kBAAMI,EAAKO,QACvB,MAEF,IAAK,iBACHX,GAAY,SAACY,GAAD,OAAUA,EAAKR,EAAKO,KAAKE,OAAST,EAAKO,YASvD,qBAAKlD,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,uCACA,cAACmB,EAAD,CAAOC,IAAKkB,GAAQ,cAlD5BN,EAAOQ,iBAAiB,QAAQ,SAACX,GAC/BY,QAAQC,IAAI,oBAGdV,EAAOQ,iBAAiB,SAAS,WAC/BC,QAAQC,IAAI,oDCRdW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5e53ff98.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    backgroundColor: 'gainsboro'\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(4)',\r\n    color: \"green\"\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  nested: {\r\n    paddingLeft: 40,\r\n  },\r\n});\r\n\r\nexport interface machine {\r\n  Uptime: string,\r\n  Hostname: string,\r\n  IP: string,\r\n  OS: string,\r\n  Services?: string[]\r\n}\r\n\r\ninterface Props {\r\n  m: machine,\r\n  key?: string\r\n}\r\n\r\nexport default function Machine({key, m}: Props) {\r\n  const classes = useStyles();\r\n  const bull = <span className={classes.bullet}>â€¢</span>;\r\n\r\n  return (\r\n    <Card className={classes.root} key={key}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          {m.Uptime}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          {bull} {m.Hostname}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          {m.IP} -- {m.OS}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Machine, { machine } from '../Machine';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100,\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  inv: machine[],\r\n  key?: string\r\n}\r\n\r\nexport default function MGrid({inv, key}: Props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid container className={classes.root} spacing={2} key={key}>\r\n            <Grid item xs={12}>\r\n                <Grid container justify=\"center\" spacing={3}>\r\n                    {Object.entries(inv).map(e => {\r\n                      const [k, v] = e;\r\n                      return (\r\n                        <Grid key={k} item>\r\n                          <Machine key={k} m={v}/>\r\n                        </Grid>\r\n                      );\r\n                    })}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>  \r\n    );\r\n}\r\n","import React from 'react';\nimport MGrid from './components/MGrid/MGrid'\nimport './App.css';\n\nimport { machine } from './components/Machine';\n\nconst socket = new WebSocket('ws://localhost:8080/ws');\n\nsocket.addEventListener('open', (e) => {\n  console.log('WS connected!');\n});\n\nsocket.addEventListener('close', () => {\n  console.log('Websocket connection closed, refreshing page.')\n});\n\nexport default function App() { //networks) {\n  const [ms, setMachines] = React.useState([{\n    Uptime: \"Uptime\",\n    Hostname: \"Hostname\",\n    IP: \"IP\",\n    OS: \"OS\",\n    Services: [\"Services?\"]\n  } as machine]);\n\n  socket.addEventListener('open', (e) => {\n      console.log('WS connected!');\n  });\n\n  socket.addEventListener('message', (e) => {\n    console.log(`Received: ${e.data}`);\n    \n    const data = JSON.parse(e.data);\n    switch (data.OP) {\n\n      case 'PING':\n        socket.send(JSON.stringify({\n          type: 'PONG'\n        }));\n        break;\n\n      case 'CURR_MACHINES':\n        setMachines(() => data.Data);\n        break;\n\n      case 'UPDATE_MACHINE':\n        setMachines((prev) => prev[data.Data.Ident] = data.Data);\n        break;\n\n      default:\n        break;\n      }\n  });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>LAN-1</h1>\n        <MGrid inv={ms} key=\"MGrid\"/>\n      </header>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}