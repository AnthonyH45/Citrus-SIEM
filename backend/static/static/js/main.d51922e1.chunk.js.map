{"version":3,"sources":["components/Machine/Machines.tsx","components/MGrid/MGrid.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","root","minWidth","backgroundColor","alive","display","margin","transform","color","dead","title","fontSize","pos","marginBottom","nested","paddingLeft","Machine","key","m","classes","Card","className","CardContent","Typography","gutterBottom","Uptime","variant","component","On","Hostname","IP","OS","theme","flexGrow","paper","height","width","control","padding","spacing","MGrid","inv","console","log","Grid","container","item","xs","justify","Object","values","map","e","Ident","socket","WebSocket","App","React","useState","ms","setMachines","addEventListener","data","JSON","parse","OP","send","stringify","type","prev","assign","Data","on","machine","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAKMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,gBAAiB,aAEnBC,MAAO,CACLC,QAAS,eACTC,OAAQ,QACRC,UAAW,WACXC,MAAO,SAETC,KAAM,CACJJ,QAAS,eACTC,OAAQ,QACRC,UAAW,WACXC,MAAO,OAETE,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,IAEhBC,OAAQ,CACNC,YAAa,MAkBF,SAASC,EAAT,GAAmC,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,EAC9BC,EAAUpB,IAChB,OACE,cAACqB,EAAA,EAAD,CAAMC,UAAWF,EAAQlB,KAAzB,SACE,eAACqB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYF,UAAWF,EAAQT,MAAOF,MAAM,gBAAgBgB,cAAY,EAAxE,SACGN,EAAEO,SAEL,eAACF,EAAA,EAAD,CAAYG,QAAQ,KAAKC,UAAU,KAAnC,UACE,sBAAMN,UAAqB,MAATH,EAAEU,GAAcT,EAAQf,MAAMe,EAAQV,KAAxD,oBADF,IAC0ES,EAAEW,YAE5E,eAACN,EAAA,EAAD,CAAYF,UAAWF,EAAQP,IAAKJ,MAAM,gBAA1C,UACGU,EAAEY,GADL,OACaZ,EAAEa,UATiBd,GC7CxC,IAAMlB,EAAYC,aAAW,SAACgC,GAAD,MAAY,CACvC/B,KAAM,CACJgC,SAAU,GAEZC,MAAO,CACLC,OAAQ,IACRC,MAAO,KAETC,QAAS,CACPC,QAASN,EAAMO,QAAQ,QAQZ,SAASC,EAAT,GAA8B,IAAdC,EAAa,EAAbA,IACvBtB,EAAUpB,IAEhB,OAAO0C,GAEPC,QAAQC,IAAIF,GAGR,cAACG,EAAA,EAAD,CAAMC,WAAS,EAACxB,UAAWF,EAAQlB,KAAMsC,QAAS,EAAlD,SACI,cAACK,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACI,cAACH,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAQ,SAAST,QAAS,EAA1C,SACKU,OAAOC,OAAOT,GAAKU,KAAI,SAAAC,GACtB,OACE,cAACR,EAAA,EAAD,CAA6BE,MAAI,EAAjC,SACE,cAAC9B,EAAD,CAAmCE,EAAGkC,GAAxBA,EAAEC,MAAM,cADbD,EAAEC,MAAM,oBAVpB,wD,UCnBfC,EAAS,IAAIC,UAAU,0BAYd,SAASC,IAAO,IAAD,EACFC,IAAMC,SAAS,IADb,mBACrBC,EADqB,KACjBC,EADiB,KAsC5B,OAnCAN,EAAOO,iBAAiB,WAAW,SAACT,GAClCV,QAAQC,IAAR,oBAAyBS,EAAEU,OAE3B,IAAMA,EAAOC,KAAKC,MAAMZ,EAAEU,MAC1B,OAAQA,EAAKG,IAEX,IAAK,OACHX,EAAOY,KAAKH,KAAKI,UAAU,CACzBC,KAAM,UAER,MAEF,IAAK,gBAOL,IAAK,iBACHR,GACE,SAACS,GACC,OAAOpB,OAAOqB,OAAOD,EAAdpB,OAAA,IAAAA,CAAA,GAAsBa,EAAKS,KAAKlB,MAAQS,EAAKS,KAAKC,YASnE9B,QAAQC,IAAI,MACZD,QAAQC,IAAIgB,GACZjB,QAAQC,IAAI,MAGV,qBAAKtB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,uCACE,cAACmB,EAAD,CAAOC,IAAKkB,EAAGc,eArDzBnB,EAAOO,iBAAiB,QAAQ,SAACT,GAC/BV,QAAQC,IAAI,oBAEdW,EAAOO,iBAAiB,SAAS,WAC/BnB,QAAQC,IAAI,oDCNd+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d51922e1.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    backgroundColor: 'gainsboro'\r\n  },\r\n  alive: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(4)',\r\n    color: \"green\"\r\n  },\r\n  dead: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(4)',\r\n    color: \"red\"\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  nested: {\r\n    paddingLeft: 40,\r\n  },\r\n});\r\n\r\nexport interface machine {\r\n  Uptime: string,\r\n  Hostname: string,\r\n  IP: string,\r\n  OS: string,\r\n  On: \"1\" | \"0\",\r\n  Ident: string\r\n}\r\n\r\ninterface Props {\r\n  m: machine,\r\n  key?: string\r\n}\r\n\r\nexport default function Machine({key, m}: Props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root} key={key}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          {m.Uptime}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          <span className={(m.On === \"1\") ? classes.alive:classes.dead}>â€¢</span> {m.Hostname}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          {m.IP} -- {m.OS}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Machine, { machine } from '../Machine';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100,\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  [inv: string]: machine;\r\n}\r\n\r\nexport default function MGrid({inv}: Props) {\r\n  const classes = useStyles();\r\n\r\n  if (!!!inv) return <h2>No machines added yet!</h2>;\r\n\r\n  console.log(inv)\r\n\r\n  return (\r\n      <Grid container className={classes.root} spacing={2}>\r\n          <Grid item xs={12}>\r\n              <Grid container justify=\"center\" spacing={3}>\r\n                  {Object.values(inv).map(e => {\r\n                    return (\r\n                      <Grid key={e.Ident+\"griddd\"} item>\r\n                        <Machine key={e.Ident+\"machineee\"} m={e}/>\r\n                      </Grid>\r\n                    );\r\n                  })}\r\n              </Grid>\r\n          </Grid>\r\n      </Grid>  \r\n  );\r\n}\r\n","import React from 'react';\nimport MGrid from './components/MGrid/MGrid';\nimport './App.css';\n\nimport { machine } from './components/Machine';\n\nconst socket = new WebSocket('ws://localhost:8080/ws');\nsocket.addEventListener('open', (e) => {\n  console.log('WS connected!');\n});\nsocket.addEventListener('close', () => {\n  console.log('Websocket connection closed, refreshing page.')\n});\n\ninterface f {\n  [inv: string]: machine\n}\n\nexport default function App() {\n  const [ms, setMachines] = React.useState({} as f);\n\n  socket.addEventListener('message', (e) => {\n    console.log(`Received: ${e.data}`);\n    \n    const data = JSON.parse(e.data);\n    switch (data.OP) {\n\n      case 'PING':\n        socket.send(JSON.stringify({\n          type: 'PONG'\n        }));\n        break;\n\n      case 'CURR_MACHINES':\n        setMachines(\n          (prev: f) => {\n            return Object.assign(prev, {[data.Data.Ident]: data.Data.on}) as f} \n        );\n        break;\n\n      case 'UPDATE_MACHINE':\n        setMachines(\n          (prev: f) => {\n            return Object.assign(prev, {[data.Data.Ident]: data.Data.on}) as f} \n        );\n        break;\n\n      default:\n        break;\n      }\n  });\n\n  console.log(\"HI\")\n  console.log(ms)\n  console.log(\"IH\")\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>LAN-1</h1>\n          <MGrid inv={ms.machine}/>\n      </header>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}