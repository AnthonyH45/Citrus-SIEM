{"version":3,"sources":["components/Machine/Machines.tsx","components/MGrid/MGrid.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","root","minWidth","backgroundColor","alive","display","margin","transform","color","dead","title","fontSize","pos","marginBottom","nested","paddingLeft","Machine","key","m","classes","console","log","Card","className","CardContent","Typography","gutterBottom","Uptime","variant","component","On","Hostname","IP","OS","theme","flexGrow","paper","height","width","control","padding","spacing","MGrid","props","state","Grid","container","item","xs","justify","Array","from","this","inv","map","kv","gridKey","machineKey","Component","socket","WebSocket","App","React","useState","Map","ms","setMachines","addEventListener","e","data","mInfo","JSON","parse","OP","send","stringify","type","Data","prev","undefined","i","length","Ident","push","v","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0e252fe.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    backgroundColor: 'gainsboro'\n  },\n  alive: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(4)',\n    color: \"green\"\n  },\n  dead: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(4)',\n    color: \"red\"\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  nested: {\n    paddingLeft: 40,\n  },\n});\n\nexport interface machine {\n  Uptime: string,\n  Hostname: string,\n  IP: string,\n  OS: string,\n  On: \"1\" | \"0\",\n  Ident: string\n}\n\ninterface Props {\n  m: machine,\n  key?: string\n}\n\nexport default function Machine({key, m}: Props) {\n  const classes = useStyles();\n\n  console.log(m)\n\n  return (\n    <Card className={classes.root} key={key}>\n      <CardContent>\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n          {m.Uptime}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          <span className={(m.On === \"1\") ? classes.alive:classes.dead}>â€¢</span> {m.Hostname}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          {m.IP} -- {m.OS}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n","import { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport Machine, { machine } from '../Machine';\nimport { renderIntoDocument } from 'react-dom/test-utils';\nimport { Component } from 'react';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    height: 140,\n    width: 100,\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n}));\n\ntype GridProps = {\n  key: string;\n}\n\ntype GridState = {\n  inv: Map<string, machine>;\n}\n\nexport default class MGrid extends Component<GridProps, GridState> {\n  constructor(props: GridProps) {\n    super(props);\n\n    console.log('from mgrid:');\n    console.log(this.state);\n  }\n\n  render() {\n    return (\n      <Grid container className=\"AAA\" spacing={2}>\n          <Grid item xs={12}>\n              <Grid container justify=\"center\" spacing={3}>\n                  {Array.from(this.state.inv).map((kv) => {\n                    const gridKey = `Grid_${kv[0]}`;\n                    const machineKey = `Machine_${kv[0]}`;\n                    return (\n                      <Grid key={gridKey} item>\n                        <Machine key={machineKey} m={kv[1]}/>\n                      </Grid>\n                    );\n                  })}\n              </Grid>\n          </Grid>\n      </Grid>  \n    );\n  }\n}\n\n/*\nexport class MGrid extends React.Component {\n  \n    const classes = useStyles();\n\n    console.log(inv)\n\n    render() {\n      return (\n        <Grid container className={classes.root} spacing={2} key={key}>\n            <Grid item xs={12}>\n                <Grid container justify=\"center\" spacing={3}>\n                    {inv.map(e => {\n                      return (\n                        <Grid key={e.Ident} item>\n                          <Machine key={e.Ident} m={e}/>\n                        </Grid>\n                      );\n                    })}\n                </Grid>\n            </Grid>\n        </Grid>  \n    );\n    }\n}\n*/\n","import React from 'react';\nimport MGrid from './components/MGrid/MGrid';\nimport './App.css';\n\nimport { machine } from './components/Machine';\n\n// const socket = new WebSocket('ws://localhost:8080/ws');\nconst socket = new WebSocket('ws://172.26.47.79:8080/ws'); // hehe\n\nsocket.addEventListener('open', (e) => {\n  console.log('WS connected!');\n});\n\nsocket.addEventListener('close', () => {\n  console.log('Websocket connection closed, refreshing page.')\n});\n\nexport default function App() { //networks) {\n  const [ms, setMachines] = React.useState(new Map<string, machine>());\n\n  const updateMachine = (mInfo: machine) => {\n    setMachines((prev: any) => { // supposed to be `: machine[]`\n      if (prev === undefined) prev = [];\n\n        for (let i = 0; i < prev.length; i++) {\n          if (prev[i].Ident === mInfo.Ident) {\n             prev[i] = mInfo;\n             return prev;\n          }\n        }\n\n        prev.push(mInfo);\n        console.log(\"ret: \");\n        console.log(prev);\n        return prev;\n    });\n  }\n\n  socket.addEventListener('open', (e) => {\n      console.log('WS connected!');\n  });\n\n  socket.addEventListener('message', (e) => {\n    console.log(`Received: ${e.data}`);\n    \n    const data = JSON.parse(e.data);\n    switch (data.OP) {\n\n      case 'PING':\n        socket.send(JSON.stringify({\n          type: 'PONG'\n        }));\n        break;\n\n      case 'CURR_MACHINES':\n        setMachines(() => new Map<string, machine>(data.Data));\n        break;\n\n      case 'UPDATE_MACHINE':\n        updateMachine(data.Data);\n        break;\n\n      default:\n        break;\n      }\n  });\n\n  console.log(\"HI\")\n  console.log(ms)\n  console.log(\"IH\")\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>LAN-1</h1>\n          {Array.from(ms).map((v) => {\n            const key = `MGrid_${v[0]}`;\n            return <MGrid key={key} {...v[1]} />\n          })}\n      </header>\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}