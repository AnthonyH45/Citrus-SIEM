{"version":3,"sources":["components/Machine/Machines.tsx","components/MGrid/MGrid.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","root","minWidth","backgroundColor","alive","display","margin","transform","color","dead","title","fontSize","pos","marginBottom","nested","paddingLeft","Machine","m","classes","ip","IP","slice","length","React","useState","open","setOpen","console","log","Services","Card","className","CardContent","Typography","gutterBottom","Uptime","variant","component","On","Hostname","OS","List","aria-labelledby","ListItem","button","onClick","ListItemText","primary","Collapse","in","timeout","unmountOnExit","undefined","map","s","disablePadding","LocalAddr","secondary","ForAddr","ProgName","ConnType","theme","flexGrow","paper","height","width","control","padding","spacing","MGrid","invP","invS","Grid","container","item","xs","justify","Array","from","kv","App","Map","ms","setMachines","useEffect","socket","WebSocket","addEventListener","e","data","JSON","parse","OP","send","stringify","type","Object","entries","Data","prev","mInfo","set","Ident","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cac4a516.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    backgroundColor: 'gainsboro'\r\n  },\r\n  alive: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(4)',\r\n    color: \"green\"\r\n  },\r\n  dead: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(4)',\r\n    color: \"red\"\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  nested: {\r\n    paddingLeft: 40,\r\n  },\r\n});\r\n\r\nexport interface machine {\r\n  Uptime: string,\r\n  Hostname: string,\r\n  IP: string,\r\n  OS: string,\r\n  On: \"1\" | \"0\",\r\n  Ident: string\r\n  Services?: [{\r\n    LocalAddr: string,\r\n    ForAddr: string,\r\n    ProgName: string,\r\n    ConnType: string\r\n  }]\r\n}\r\n\r\ninterface Props {\r\n  m: machine,\r\n  key?: string\r\n}\r\n\r\nexport default function Machine({ m }: Props) {\r\n  const classes = useStyles();\r\n\r\n  const ip = m.IP.slice(0, m.IP.length - 5) + 'XXXXX';\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  console.log(\"S:\")\r\n  console.log(m.Services)\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          {m.Uptime}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          <span className={(m.On === \"1\") ? classes.alive:classes.dead}>â€¢</span> {m.Hostname}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          {ip} -- {m.OS}\r\n        </Typography>\r\n\r\n            <Typography variant=\"body2\" component=\"p\">\r\n              <List\r\n                  component=\"nav\" aria-labelledby=\"nested-list-subheader\"\r\n              >\r\n                <ListItem button onClick={handleClick}>\r\n                  <ListItemText primary=\"Active Connections\" />\r\n                  {open ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                {\r\n                  (m.Services === undefined || m.Services === null) ?\r\n                  <b>No connections reported yet</b>\r\n                  : [(m.Services.map((s) => (\r\n                    <List component=\"div\" disablePadding>\r\n                        <ListItem className={classes.nested}>\r\n                            <ListItemText primary={s.LocalAddr} secondary=\"LocalAddr\"/>\r\n                        </ListItem>\r\n                        <ListItem className={classes.nested}>\r\n                            <ListItemText primary={s.ForAddr} secondary=\"ForAddr\"/>\r\n                        </ListItem>\r\n                        <ListItem className={classes.nested}>\r\n                            <ListItemText primary={s.ProgName} secondary=\"ProgName\"/>\r\n                        </ListItem>\r\n                        <ListItem className={classes.nested}>\r\n                            <ListItemText primary={s.ConnType} secondary=\"ConnType\"/>\r\n                        </ListItem>\r\n                    </List>\r\n                  ) ) )]}\r\n                </Collapse>\r\n                </List>\r\n                </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Machine, { machine } from '../Machine';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100,\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  invP: Map<string, machine>, // Props\r\n  invS: Map<string, machine> // State\r\n}\r\n\r\nexport default function MGrid({invP, invS}: Props) {\r\n  const classes = useStyles();\r\n\r\n    return (\r\n      <Grid container className={classes.root} spacing={2}>\r\n          <Grid item xs={12}>\r\n              <Grid container justify=\"center\" spacing={3}>\r\n                  {Array.from(invP).map((kv) => {\r\n                    return (\r\n                      <Grid key={\"Grid_\"+kv[0]} item>\r\n                        <Machine key={\"Machine_\"+kv[0]} m={kv[1]}/>\r\n                      </Grid>\r\n                    );\r\n                  })}\r\n              </Grid>\r\n          </Grid>\r\n      </Grid>  \r\n    );\r\n  }\r\n","import React from 'react';\r\nimport MGrid from './components/MGrid/MGrid';\r\nimport './App.css';\r\n\r\nimport { machine } from './components/Machine';\r\n\r\nexport default function App() {\r\n  const [ms, setMachines] = React.useState(new Map<string, machine>());\r\n  \r\n  React.useEffect(() => {\r\n    const socket = new WebSocket('ws://localhost:8080/ws');\r\n\r\n    socket.addEventListener('open', (e) => {\r\n      console.log('WS connected!');\r\n    });\r\n\r\n    socket.addEventListener('close', () => {\r\n      console.log('Websocket connection closed, refreshing page.')\r\n    });\r\n\r\n    socket.addEventListener('open', (e) => {\r\n      console.log('WS connected!');\r\n    });\r\n\r\n    socket.addEventListener('message', (e) => {\r\n      console.log(`Received: ${e.data}`);\r\n      \r\n      const data = JSON.parse(e.data);\r\n      switch (data.OP) {\r\n\r\n        case 'PING':\r\n          socket.send(JSON.stringify({\r\n            type: 'PONG'\r\n          }));\r\n          break;\r\n\r\n        case 'CURR_MACHINES':\r\n          setMachines(() => new Map<string, machine>(Object.entries(data.Data)));\r\n          break;\r\n\r\n        case 'UPDATE_MACHINE':\r\n          setMachines((prev) => {\r\n            const mInfo: machine = data.Data;\r\n\r\n            prev.set(mInfo.Ident, mInfo);\r\n            return new Map<string, machine>(prev);\r\n          });\r\n          break;\r\n\r\n        default:\r\n          break;\r\n        }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>LAN-1</h1>\r\n          <MGrid key=\"MGrid\" invP={ms} invS={ms}/>\r\n      </header>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}